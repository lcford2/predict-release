#+TITLE: Random Spatial Tree Analysis
#+AUTHOR: Lucas Ford
#+auto_tangle: t

* Import packages
#+begin_src python :tangle random_spatial_tree_analysis.py
import pathlib
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
import networkx as nx
from collections import defaultdict
from IPython import embed as II
#+end_src

* Variable map for nice names
#+begin_src python :tangle random_spatial_tree_analysis.py
VAR_MAP = {
    "rts": "Residence Time [days]",
    "release_pre": "Prev. Release [1000 acre-ft/day]",
    "storage_pre": "Prev. Storage [1000 acre-ft]",
    "inflow": "Net Inflow [1000 acre-ft/day]",
    "release_roll7": "Rel. Weekly Mean [1000 acre-ft/day]",
    "storage_roll7": "Sto. Weekly Mean [1000 acre-ft]",
    "inflow_roll7": "Inf. Weekly Mean [1000 acre-ft/day]",
    "storage_x_inflow": "St. x Inf.",
    "max_sto": "Maximum Storage [1000 acre-ft]"
}
VAR_MAP_SHORT = {
    "rts": "RT",
    "release_pre": "Rel Pre",
    "storage_pre": "Sto Pre",
    "inflow": "Net Inf",
    "release_roll7": "Rel Roll7",
    "storage_roll7": "Sto Roll7",
    "inflow_roll7": "Inf Roll7",
    "storage_x_inflow": "Sto x Inf",
    "max_sto": "Sto Max"
}
#+end_src

* Load data
Data is stored in subdirectories within ~/home/lford/projects/predict-release/results/tclr_spatial_eval/all/~.
Each subdirectory is tagged with the random seed used to generate the training and testing reservoir sets (0-999).
#+begin_src python :tangle random_spatial_tree_analysis.py
def load_data():
    path = "../results/tclr_spatial_eval/all/"
    dirfmt = "TD3_RT_MS_0.75_{seed}"
    output = {}
    for seed in range(1000):
        file = pathlib.Path(path) / \
               dirfmt.format(seed=seed) / \
               "tree.dot"
        output[seed] = nx.Graph(
            nx.drawing.nx_agraph.read_dot(
                file.as_posix())).to_directed()
    return output
#+end_src

* Parse the graph
I want to extract the splitting thresholds and variables
#+begin_src python :tangle random_spatial_tree_analysis.py
def parse_graph(tree):
    output = {}
    for n in tree.nodes:
        node = tree.nodes[n]
        label = node["label"]
        split = label.split("\n")[-1]
        try:
            var, thresh = split.split(" > ")
            output[n] = (var, thresh)
        except ValueError as e:
            # leaf node
            pass
    return output
#+end_src

* Turn parsed trees into dataframes
#+begin_src python :tangle random_spatial_tree_analysis.py
def trees_to_frames(parsed):
    node_vars = {str(i):[np.nan for _ in range(1000)] for i in range(13)}
    node_thresh = {str(i):[np.nan for _ in range(1000)] for i in range(13)}
    for s, p in parsed.items():
        for node, (var, thresh) in p.items():
            node_vars[node][int(s)] = var
            node_thresh[node][int(s)] = float(thresh)
    node_vars = pd.DataFrame(node_vars).dropna(how="all", axis=1)
    node_thresh = pd.DataFrame(node_thresh).dropna(how="all", axis=1)
    return node_vars, node_thresh
#+end_src

* Determine tree structure
Some trees are built different than others. For example, in 22 trees, node 5 does not split. This changes the IDS for the rest of the nodes.
This will assign ids to everthing that reflects the structure of the tree.
The first number will be the level (root = 0) and the second number will be the location ascending from left to right starting at 0.
#+begin_src python :tangle yes
def determine_tree_structure(node_vars):
    nodes = [
        set([str(i) for i in [0,1,2,5,8,9]]),
        set([str(i) for i in [0,1,2,6,7,10]]),
        set([str(i) for i in [0,1,2,5,8,9,12]])
    ]
    structs = [
        ["00", "10", "20", "11", ]
    ]
    tree_structs = []
    for i, row in node_vars.iterrows():
        nodes = set(row.dropna().index.tolist())
        for j, strct in enumerate(structs):
            if j == nodes:
                tree_structs.append()

#+end_src
* Get the number of times a variable is chosen
#+begin_src python :tangle random_spatial_tree_analysis.py
def get_variable_counts(node_vars):
    var_counts = {}
    for col in node_vars.columns:
        var_counts[col] = node_vars[col].value_counts()
    var_counts = pd.DataFrame(var_counts)
    return var_counts
#+end_src

* Combine vars and thresholds into single dataframes
#+begin_src python :tangle random_spatial_tree_analysis.py
def combine_var_thresh(node_vars, node_thresh):
    node_vars = node_vars.reset_index().rename(columns={"index":"seed"}).melt(
        id_vars=["seed"], var_name="node", value_name="var")
    node_thresh = node_thresh.reset_index().rename(columns={"index":"seed"}).melt(
        id_vars=["seed"], var_name="node", value_name="thresh")

    node_vars = node_vars.set_index(["seed", "node"])
    node_thresh = node_thresh.set_index(["seed", "node"])
    node_vars["thresh"] = node_thresh["thresh"]
    node_vars = node_vars.reset_index().dropna()
    return node_vars
#+end_src

* Distribution plot of thresholds for a given split
#+begin_src python :tangle random_spatial_tree_analysis.py
def plot_thresh_dist(df, node=0, show=False, save=False):
    sns.set_context("notebook")
    pdf = df[df["node"] == str(node)]
    pvars = pdf["var"].unique()
    pvar_counts = pdf["var"].value_counts()
    nvars = pvars.size
    fig, axes = plt.subplots(
        1, nvars,
        sharex=False, sharey=False,
        figsize=(16,9)
    )
    axes = axes.flatten()
    for var, ax in zip(pvars, axes):
        sns.histplot(
            data=pdf[pdf["var"] == var],
            x="thresh",
            stat="count",
            kde=False,
            legend=False,
            ax=ax
        )
        ax.set_title(f"{VAR_MAP_SHORT.get(var, var)} (N={pvar_counts.get(var)})")
        # ax.set_title(f"{var} (N={pvar_counts.get(var)})")
        ax.set_xlabel("Threshold")
    fig.suptitle(f"Node {node}")

    figmgr = plt.get_current_fig_manager()
    figmgr.window.showMaximized()
    if nvars > 5:
        wspace = 0.35 + 0.05 * (nvars - 5)
    else:
        wspace = 0.35
    plt.subplots_adjust(
        top=0.926,
        bottom=0.065,
        left=0.042,
        right=0.988,
        hspace=0.2,
        wspace=wspace
    )
    if save:
        if isinstance(save, str):
            filename = save
        else:
            dirname = "/home/lford/Documents/move_to_drive/03_30_2022_meeting"
            file = f"var_thresh_hist_node_{node}"
            filename = f"{dirname}/{file}.png"
        plt.savefig(filename)
    if show:
        plt.show()
#+end_src

* Main function
#+begin_src python :tangle random_spatial_tree_analysis.py
def main():
    plt.style.use("ggplot")
    text_color = "black"
    mpl.rcParams["text.color"] = text_color
    mpl.rcParams["axes.labelcolor"] = text_color
    mpl.rcParams["xtick.color"] = text_color
    mpl.rcParams["ytick.color"] = text_color

    sns.set_context("talk")

    trees = load_data()
    parsed = {s:parse_graph(t) for s, t in trees.items()}
    node_vars, node_thresh = trees_to_frames(parsed)
    var_counts = get_variable_counts(node_vars)
    comb = combine_var_thresh(node_vars, node_thresh)
    nodes = comb["node"].unique()
    for node in nodes:
        plot_thresh_dist(comb, node=node, show=False, save=True)

if __name__ == "__main__":
    main()
#+end_src
